/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ComplexDatasetAnalysis, SimpleDatasetAnalysis } from '../../../../api-client'
import {
    ComplexDatasetAnalysisFromJSON,
    ComplexDatasetAnalysisToJSON, DatedXYDataPoint, DatedXYDataPointFromJSON,
    DatedXYDataPointToJSON, SimpleDatasetAnalysisFromJSON,
    SimpleDatasetAnalysisToJSON, exists
} from '../../../../api-client'

/**
 *
 * @export
 * @interface TimedDataset
 */
export interface TimedDataset {
    /**
     *
     * @type {Array<DatedXYDataPoint>}
     * @memberof TimedDataset
     */
    dataPoints?: Array<DatedXYDataPoint> | null
    /**
     *
     * @type {string}
     * @memberof TimedDataset
     */
    provider?: string | null
    /**
     *
     * @type {SimpleDatasetAnalysis}
     * @memberof TimedDataset
     */
    simpleAnalysis?: SimpleDatasetAnalysis
    /**
     *
     * @type {ComplexDatasetAnalysis}
     * @memberof TimedDataset
     */
    complexAnalysis?: ComplexDatasetAnalysis
}

/**
 * Check if a given object implements the TimedDataset interface.
 */
export function instanceOfDataset(value: object): boolean {
    let isInstance = true

    return isInstance
}

export function TimedDatasetFromJSON(json: any): TimedDataset {
    return TimedDatasetFromJSONTyped(json, false)
}

export function TimedDatasetFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): TimedDataset {
    if (json === undefined || json === null) {
        return json
    }
    return {
        dataPoints: !exists(json, 'dataPoints')
            ? undefined
            : json['dataPoints'] === null
                ? null
                : (json['dataPoints'] as Array<any>).map(DatedXYDataPointFromJSON),
        provider: !exists(json, 'provider') ? undefined : json['provider'],
        simpleAnalysis: !exists(json, 'simpleAnalysis')
            ? undefined
            : SimpleDatasetAnalysisFromJSON(json['simpleAnalysis']),
        complexAnalysis: !exists(json, 'complexAnalysis')
            ? undefined
            : ComplexDatasetAnalysisFromJSON(json['complexAnalysis'])
    }
}

export function TimedDatasetToJSON(value?: TimedDataset | null): any {
    if (value === undefined) {
        return undefined
    }
    if (value === null) {
        return null
    }
    return {
        dataPoints:
            value.dataPoints === undefined
                ? undefined
                : value.dataPoints === null
                    ? null
                    : (value.dataPoints as Array<any>).map(DatedXYDataPointToJSON),
        provider: value.provider,
        simpleAnalysis: SimpleDatasetAnalysisToJSON(value.simpleAnalysis),
        complexAnalysis: ComplexDatasetAnalysisToJSON(value.complexAnalysis)
    }
}
